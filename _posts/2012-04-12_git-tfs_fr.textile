---
layout: post
title: "Utilisation de git avec un serveur tfs"
description: "Utilisation de git avec un serveur tfs"
categories: .Net
tags:
- Jenkins
- Integration Continue
published: true
---

Utilisation de Git en environnement hostile (... avec un serveur TFS)

h1. Cloner la branche principale du dépôt tfs

h2. En récupérant l'historique commplet du dépot
git tfs clone http://monServeurTfs:8080/tfs/DepotTfs $/MonProjet/NomDuTronc .

h2. En ne récupérerant que le dernier commit du dépot
git tfs quick-clone http://monServeurTfs:8080/tfs/DepotTfs $/MonProjet/NomDuTronc .

A l'ouverture de la solution Visual Studio => choix de la déconnexion temporaire (sinon il modifie plein de fichier)

h1. Synchronisation avec le dépot tfs
h2. Récupération des commits
git tfs fetch

h2. Commiter sur le dépot tfs
git tfs ct


! Toujours faire une fetch & rebase (ou merge) avant de commiter (sinon risque d'écrasement de fichier communs modifiés)

h1. Gestion d'une branche

h2. Récupération de la branche

A l'heure actuelle, il n'y a pas de solution simple et évidente :(
Toutefois, ce n'est pas impossible...

Pour cela :
	1. Modifiez le fichier "config" dans le répertoire ".git" pour ajouter les lignes (Attention! : pas de '.' dans le nom de la branche distante) :
[tfs-remote "maBrancheTfs"]
url = http://myTfsServer:8080/tfs/DepotTfs
repository = $/MonProjet/NomDeLaBranche
fetch = refs/remotes/default/maBrancheTfs

	2. Trouvez le numéro de premier commit tfs de la branche
    Ce numéro est disponible, soit dans les propriétés de la branche depuis le "Team Explorer" soit en utilisant la ligne de commande :
	"tf branches $/MonProjet/NomDeLaBranche"
	
	3. Trouvez le sha1 du commit parent à celui trouvé précédement.
	Dans l'historique de git, chercher le sha1, non pas du commit trouvé à l'étape suivante mais de son parent (n° du commit précédent -1). C'est à dire le dernier commit commun au tronc et à la branche!
	
    4. Extraire ce commit en créant une branche locale par la commande :
	git checkout -b maBrancheTfs [SHA1_TROUVE_PRECEDEMENT]
	"maBrancheTfs" est le nom de la branche git locale correspondant à la branche sur tfs
	
    5. Créer manuellement la référence sur la branche locale (autrement notre future branche ne sera pas connectée au tonc :( )
    "maBrancheTfs" est le nom de la branche distante tfs définie à l'étape 1.
    git rev-parse maBrancheTfs >> ./.git/refs/remotes/tfs/maBrancheTfs

    6. Récupérer l'historique des commits de la branche tfs!!! Commande à effectuer chaque fois qu'on voudra resynchroniser la branche avec le serveur...
    git tfs fetch -i maBrancheTfs

h2. Récupération des commits de la branche
git tfs fetch -i maBrancheTfs

h2. Commiter sur la branche
git tfs ct -i maBrancheTfs

<!--
Annexe :
http://www.drrandom.org/post/2011/11/16/Grappling-with-multiple-remotes-in-git-tfs.aspx
http://stackoverflow.com/questions/8559814/merge-two-tfs-branches-with-git-tfs
modifier le fichier de config pour ajouter nouveau tfs-remote 


Report des changeset d'un depot git vers tfs:
https://groups.google.com/group/git-tfs-dev/browse_thread/thread/929d005ff9cdcc23
http://www.tigraine.at/2010/09/01/using-git-from-powershell-just-got-easier-posh-git/

https://github.com/git-tfs/git-tfs/issues/171
https://github.com/git-tfs/git-tfs/issues/172
https://github.com/spdr870/gitextensions/issues/869

=======================================================
Exclusion  des fichiers App.config modifiés localement:

git update-index --assume-unchanged <file>

et pour les tracker de nouveau:

git update-index --no-assume-unchanged <file>

La liste de fichier ignorés :

git ls-files -v | grep ^[a-z]
http://gitready.com/intermediate/2009/02/18/temporarily-ignoring-files.html
-->


