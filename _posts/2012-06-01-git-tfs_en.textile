---
layout: post
title: "Git-tfs : Use of Git with a TFS server"
description: "Git-tfs : Use of Git with a TFS server"
categories: .Net
tags:
- Git
- TFS
published: true
---
_(or how to use Git in unfriendly environment!)_

h3. 1. Clone main branch of the TFS repository

* With the entire historic of the repository (long but advised...)
@git tfs clone http://myTfsServer:8080/tfs/TfsRepository $/MyProject/TruncName .@

* From only the last commit of the repository
@git tfs quick-clone http://myTfsServer:8080/tfs/TfsRepository $/MyProject/TruncName .@

At the Visual Studio first opening, choose to deconnect temporary the solution from the server (otherwise it will modify some files)

h3. 2. Synchronise with the Tfs repository

h4. 2.1. Fetch the commits from the trunc

@git tfs fetch@

h4. 2.2. Commit to the Tfs repository

h5. 2.2.1 Commit manualy
@git tfs ct@

! Always do a fetch & rebase (or a merge) before the commit (to avoid a overwrite of a file by your modifications)

h5. 2.2.2 Commit automaticly some local Git commits
@git tfs rcheckin@

Note : During the use of rcheckin, you can add references, in your local commit message, to Tfs workitems to associate or close them ( during the commits on the TFS Server).
The synthaxe is the following :
@git-tfs-work-item: <id> associate@ 
@git-tfs-work-item: <id> resolve@

h3. 3. Manage a Tfs branch

h4. 3.1. Fetch the Tfs branch

Actually, there is no straight forward and easy solution :( 
But, that's not impossible...

The following steps are :
	1. Modify "config" file in the directory ".git" to add the lines (Attention! : don't use '.' in the name of the remote branch) :
bc.
[tfs-remote "myTfsBranch"]
url = http://myTfsServer:8080/tfs/TfsRepository
repository = $/MyProject/BrancheName
fetch = refs/remotes/tfs/myTfsBranch

	2. Find the commit number of the first commit on the Tfs branch
    This number is displayed, even in the properties of the branch using the "Team Explorer", even with the command line :
	@tf branches $/MyProject/BrancheName@

	3. Find in the Git historic the sha1 of the father commit of the previously found commit.
	In the Git historic, find the sha1, not of the previously found commit but the one od his father ( in fact number of the previously found commit -1).
	This is in fact the last common commit between the trunc and the branch!
	
	4. Extract this commit with creating a local branch using the command line :
	@git checkout -b myTfsBranch [SHA1_PREVIOUSLY_FOUND]@
	"myTfsBranch" is the name of the local branch corresponding to the tfs branch.

	5. Manualy create the reference on the local branch (otherwise the branch won't be connected to the trunc :( )
    "myTfsBranch" is the name of the remote Tfs branch defined in the step 1.
    @git rev-parse myTfsBranch >> ./.git/refs/remotes/tfs/myTfsBranch@

	6. Fetch commit historic of the Tfs branch!!! This command should be run each time you want to retrieve the commits from the Tfs branch (and thus synchronise your local branch with the server).
    @git tfs fetch -i myTfsBranch@

h4. 3.2. Fetch new commits from the Tfs branch

@git tfs fetch -i myTfsBranch@

h4. 3.3. Commit on the Tfs branch

@git tfs ct -i myTfsBranch@

h4. 4. Sources

http://www.drrandom.org/post/2011/11/16/Grappling-with-multiple-remotes-in-git-tfs.aspx
http://stackoverflow.com/questions/8559814/merge-two-tfs-branches-with-git-tfs


Report des changeset d'un depot git vers tfs:
https://groups.google.com/group/git-tfs-dev/browse_thread/thread/929d005ff9cdcc23
http://www.tigraine.at/2010/09/01/using-git-from-powershell-just-got-easier-posh-git/

https://github.com/git-tfs/git-tfs/issues/171
https://github.com/git-tfs/git-tfs/issues/172
https://github.com/spdr870/gitextensions/issues/869



